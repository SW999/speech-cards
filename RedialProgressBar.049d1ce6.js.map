{"version":3,"sources":["src/components/radial-progress-bar/RedialProgressBar.tsx"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;AASA,IAAM,iBAAiB,GAA8C,SAA/D,iBAA+D,OAIhE;AAAA,MAHH,YAGG,QAHH,YAGG;AAAA,MAFH,KAEG,QAFH,KAEG;AAAA,MADH,KACG,QADH,KACG;;AAAA,kBACqC,oBAAiB,CAAjB,CADrC;AAAA;AAAA,MACI,YADJ;AAAA,MACkB,eADlB;;AAEH,MAAM,MAAM,GACV,YAAY,KAAK,GAAjB,GAAuB,MAAvB,GAAgC,KAAK,cAAO,YAAP,MADvC;AAGA,uBAAU,YAAK;AACb,QAAM,OAAO,GAAW,IAAI,CAAC,IAAL,CAAW,YAAY,GAAG,GAAhB,GAAuB,KAAjC,CAAxB;;AACA,QAAM,KAAK,GAAI,YAAa;AAC1B,UAAI,OAAO,KAAK,YAAhB,EAA8B,OAAO,CAAP;AAC9B,aAAO,OAAO,GAAG,YAAV,GAAyB,CAAzB,GAA6B,CAAC,CAArC;AACD,KAHa,EAAd;;AAIA,QAAI,KAAJ;;AAEA,QAAI,YAAY,KAAK,OAArB,EAA8B;AAC5B,MAAA,KAAK,GAAG,WAAW,CAAC;AAAA,eAAM,eAAe,CAAC,UAAA,CAAC;AAAA,iBAAI,CAAC,GAAG,KAAR;AAAA,SAAF,CAArB;AAAA,OAAD,EAAwC,EAAxC,CAAnB;AACD;;AAED,WAAO;AAAA,aAAY,aAAa,CAAC,KAAD,CAAzB;AAAA,KAAP;AACD,GAbD,EAaG,CAAC,YAAD,EAAe,YAAf,EAA6B,KAA7B,CAbH;;AAeA,MAAI,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,IAAP;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,8BAAuB,YAAvB;AAAd,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAkC,MAAlC,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,CAFF,CAFF,CADF;AASD,CArCD;;eAuCe","file":"RedialProgressBar.049d1ce6.js","sourceRoot":"..","sourcesContent":["import * as React from 'react';\nimport { FunctionComponent, useEffect, useState } from 'react';\n\ntype RedialProgressBarProps = {\n  currentValue: number;\n  label?: string;\n  total: number;\n};\n\nconst RedialProgressBar: FunctionComponent<RedialProgressBarProps> = ({\n  currentValue,\n  label,\n  total,\n}) => {\n  const [dynamicValue, setDynamicValue] = useState<number>(1);\n  const result: string =\n    dynamicValue === 100 ? 'Done' : label || `${dynamicValue}%`;\n\n  useEffect(() => {\n    const percent: number = Math.ceil((currentValue * 100) / total);\n    const delta = ((): number => {\n      if (percent === dynamicValue) return 0;\n      return percent > dynamicValue ? 1 : -1;\n    })();\n    let timer;\n\n    if (dynamicValue !== percent) {\n      timer = setInterval(() => setDynamicValue(v => v + delta), 30);\n    }\n\n    return (): void => clearInterval(timer);\n  }, [currentValue, dynamicValue, total]);\n\n  if (total < 2) {\n    return null;\n  }\n\n  return (\n    <div className={`progress progress-${dynamicValue}`}>\n      <div className=\"progress__count\">{result}</div>\n      <div className=\"progress__curve\">\n        <div className=\"progress__curve-first-half\" />\n        <div className=\"progress__curve-second-half\" />\n      </div>\n    </div>\n  );\n};\n\nexport default RedialProgressBar;\n"]}