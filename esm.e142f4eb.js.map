{"version":3,"sources":["node_modules/unquote/index.js","../index.js"],"names":[],"mappings":"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","file":"esm.e142f4eb.js","sourceRoot":"..","sourcesContent":["var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react';\nimport unquote from 'unquote';\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n};\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n};\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script'];\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi;\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i;\nconst BLOCK_END_R = /\\n{2,}$/;\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/;\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm;\nconst BREAK_LINE_R = /^ {2,}\\n/;\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/;\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/;\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/;\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/;\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/;\nconst CR_NEWLINE_R = /\\r\\n?/g;\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/;\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/;\nconst FORMFEED_R = /\\f/g;\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/;\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/;\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/;\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i;\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g;\n\nconst HTML_COMMENT_R = /^<!--.*?-->/;\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/;\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i;\nconst INTERPOLATION_R = /^\\{.*\\}$/;\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/;\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/;\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/;\nconst LIST_ITEM_END_R = / *\\n+$/;\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/;\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi;\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/;\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/;\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/;\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/;\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g;\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/;\nconst TAB_R = /\\t/g;\nconst TABLE_SEPARATOR_R = /^ *\\| */;\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g;\nconst TABLE_CELL_END_TRIM = / *$/;\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/;\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/;\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/;\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/;\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/;\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/;\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/;\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i;\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g;\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/;\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi;\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)';\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +';\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX);\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n);\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n);\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*';\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*';\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n);\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n];\n\nfunction containsBlockSyntax(input) {\n  return BLOCK_SYNTAXES.some(r => r.test(input));\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase();\n}\n\nfunction parseTableAlignCapture(alignCapture) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right';\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center';\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left';\n  }\n\n  return null;\n}\n\nfunction parseTableRow(source, parse, state) {\n  const prevInTable = state.inTable;\n  state.inTable = true;\n  const tableRow = parse(source.trim(), state);\n  state.inTable = prevInTable;\n\n  let cells = [[]];\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n        if (i !== 0 && i !== tableRow.length - 1) {\n          // Split the current row:\n          cells.push([]);\n        }\n    } else {\n      if (node.type === 'text' && (\n        tableRow[i + 1] == null ||\n        tableRow[i + 1].type === 'tableSeparator'\n      )) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, \"\");\n      }\n      cells[cells.length - 1].push(node);\n    }\n  });\n  return cells;\n}\n\nfunction parseTableAlign(source /*, parse, state*/) {\n  const alignText = source\n    .replace(TABLE_TRIM_PIPES, '')\n    .split('|');\n\n  return alignText.map(parseTableAlignCapture);\n}\n\nfunction parseTableCells(source, parse, state) {\n  const rowsText = source\n    .trim()\n    .split('\\n');\n\n  return rowsText.map(function(rowText) {\n      return parseTableRow(rowText, parse, state);\n  });\n}\n\nfunction parseTable(capture, parse, state) {\n  state.inline = true;\n  const header = parseTableRow(capture[1], parse, state);\n  const align = parseTableAlign(capture[2], parse, state);\n  const cells = parseTableCells(capture[3], parse, state);\n  state.inline = false;\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  };\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      };\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-');\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase();\n    });\n  }\n\n  return key;\n}\n\nfunction attributeValueToJSXPropValue(key, value) {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'));\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      );\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim();\n\n      return styles;\n    }, {});\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1);\n  }\n\n  if (value === 'true') {\n    return true;\n  } else if (value === 'false') {\n    return false;\n  }\n\n  return value;\n}\n\nfunction normalizeWhitespace(source) {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ');\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(rules) {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules);\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order;\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        );\n      }\n    });\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order;\n    let orderB = rules[typeB].order;\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB;\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1;\n    }\n\n    return 1;\n  });\n\n  function nestedParse(source, state) {\n    let result = [];\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = '';\n    while (source) {\n      let i = 0;\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i];\n        const rule = rules[ruleType];\n        const capture = rule.match(source, state, prevCapture);\n\n        if (capture) {\n          const currCaptureString = capture[0];\n          source = source.substring(currCaptureString.length);\n          const parsed = rule.parse(capture, nestedParse, state);\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType;\n          }\n\n          result.push(parsed);\n\n          prevCapture = currCaptureString;\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state);\n  };\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return regex.exec(source);\n    } else {\n      return null;\n    }\n  };\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex) {\n  return function match(source, state) {\n    if (state.inline || state.simple) {\n      return null;\n    } else {\n      return regex.exec(source);\n    }\n  };\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex) {\n  return function match(source /*, state*/) {\n    return regex.exec(source);\n  };\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(ast, state) {\n    state = state || {};\n    if (Array.isArray(ast)) {\n      const oldKey = state.key;\n      const result = [];\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false;\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i;\n\n        const nodeOut = nestedReactOutput(ast[i], state);\n        const isString = typeof nodeOut === 'string';\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut;\n        } else {\n          result.push(nodeOut);\n        }\n\n        lastWasString = isString;\n      }\n\n      state.key = oldKey;\n\n      return result;\n    }\n\n    return outputFunc(ast, nestedReactOutput, state);\n  };\n}\n\nfunction sanitizeUrl(url) {\n  try {\n    const decoded = decodeURIComponent(url)\n      .replace(/[^A-Za-z0-9/:]/g, '');\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        );\n      }\n\n      return null;\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      );\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null;\n  }\n\n  return url;\n}\n\nfunction unescapeUrl(rawUrlString) {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1');\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = true;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(parse, content, state) {\n  const isCurrentlyInline = state.inline || false;\n  const isCurrentlySimple = state.simple || false;\n  state.inline = false;\n  state.simple = true;\n  const result = parse(content, state);\n  state.inline = isCurrentlyInline;\n  state.simple = isCurrentlySimple;\n  return result;\n}\n\nfunction parseBlock(parse, content, state) {\n  state.inline = false;\n  return parse(content + '\\n\\n', state);\n}\n\nfunction parseCaptureInline(capture, parse, state) {\n  return {\n    content: parseInline(parse, capture[1], state),\n  };\n}\n\nfunction captureNothing() {\n  return {};\n}\n\nfunction renderNothing() {\n  return null;\n}\n\nfunction ruleOutput(rules) {\n  return function nestedRuleOutput(ast, outputFunc, state) {\n    return rules[ast.type].react(ast, outputFunc, state);\n  };\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ');\n}\n\nfunction get(src, path, fb) {\n  let ptr = src;\n  const frags = path.split('.');\n\n  while (frags.length) {\n    ptr = ptr[frags[0]];\n\n    if (ptr === undefined) break;\n    else frags.shift();\n  }\n\n  return ptr || fb;\n}\n\nfunction getTag(tag, overrides) {\n  const override = get(overrides, tag);\n\n  if (!override) return tag;\n\n  return typeof override === 'function' || (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag);\n}\n\n/**\n * anything that must scan the tree before everything else\n */\nconst PARSE_PRIORITY_MAX = 1;\n\n/**\n * scans for block-level constructs\n */\nconst PARSE_PRIORITY_HIGH = 2;\n\n/**\n * inline w/ more priority than other inline\n */\nconst PARSE_PRIORITY_MED = 3;\n\n/**\n * inline elements\n */\nconst PARSE_PRIORITY_LOW = 4;\n\n/**\n * bare text and stuff that is considered leftovers\n */\nconst PARSE_PRIORITY_MIN = 5;\n\nexport function compiler(markdown, options) {\n  options = options || {};\n  options.overrides = options.overrides || {};\n  options.slugify = options.slugify || slugify;\n  options.namedCodesToUnicode = options.namedCodesToUnicode \n    ? {...namedCodesToUnicode, ...options.namedCodesToUnicode}\n    : namedCodesToUnicode;\n\n  const createElementFn = options.createElement || React.createElement;\n\n  // eslint-disable-next-line no-unused-vars\n  function h(tag, props, ...children) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {});\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className:\n          cx(props && props.className, overrideProps.className) || undefined,\n      },\n      ...children\n    );\n  }\n\n  function compile(input) {\n    let inline = false;\n\n    if (options.forceInline) {\n      inline = true;\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false;\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    );\n\n    let jsx;\n    if (arr.length > 1) {\n      jsx = inline ? <span key=\"outer\">{arr}</span> : <div key=\"outer\">{arr}</div>;\n    } else if (arr.length === 1) {\n      jsx = arr[0];\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>;\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />;\n    }\n\n    return jsx;\n  }\n\n  function attrStringToMap(str) {\n    const attributes = str.match(ATTR_EXTRACTOR_R);\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=');\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(\n              raw.slice(0, delimiterIdx)\n            ).trim();\n            const value = unquote(raw.slice(delimiterIdx + 1).trim());\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key;\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value));\n\n            if (\n              HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n              HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue)\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              );\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true;\n          }\n\n          return map;\n        }, {})\n      : undefined;\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`);\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`);\n    }\n  }\n\n  const footnotes = [];\n  const refs = {};\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        };\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        );\n      },\n    },\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />;\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />;\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let content = capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, '');\n        return {\n          content: content,\n          lang: undefined,\n        };\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        );\n      },\n    },\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        };\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>;\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        });\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        );\n      },\n    },\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        };\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        );\n      },\n    },\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        };\n      },\n      react(node, output, state) {\n        const Tag = `h${node.level}`;\n        return (\n          <Tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </Tag>\n        );\n      },\n    },\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        };\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse() {\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        );\n      },\n    },\n\n    link: {\n      match: inlineRegex(LINK_R, false),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        );\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        };\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        };\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1];\n        let target = capture[1];\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target;\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        };\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture);\n        const isListBlock = state._list || !state.inline;\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source;\n\n          return LIST_R.exec(source);\n        } else {\n          return null;\n        }\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2];\n        const ordered = bullet.length > 1;\n        const start = ordered ? +bullet : undefined;\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R);\n\n        let lastItemWasAParagraph = false;\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length;\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm');\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '');\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1;\n          const containsBlocks = content.indexOf('\\n\\n') !== -1;\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph);\n          lastItemWasAParagraph = thisItemIsAParagraph;\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline;\n          const oldStateList = state._list;\n          state._list = true;\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent;\n          if (thisItemIsAParagraph) {\n            state.inline = false;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n');\n          } else {\n            state.inline = true;\n            adjustedContent = content.replace(LIST_ITEM_END_R, '');\n          }\n\n          const result = parse(adjustedContent, state);\n\n          // Restore our state before returning\n          state.inline = oldStateInline;\n          state._list = oldStateList;\n\n          return result;\n        });\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        };\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul';\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>;\n            })}\n          </Tag>\n        );\n      },\n    },\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n';\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>;\n      },\n    },\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        };\n\n        return {};\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        );\n      },\n    },\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: PARSE_PRIORITY_MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'), state),\n          ref: capture[2],\n        };\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : <span key={state.key}>{output(node.fallbackContent, state)}</span>;\n      },\n    },\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        );\n      },\n    },\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n            return null;\n        }\n        return TABLE_SEPARATOR_R.exec(source);\n      },\n      order: PARSE_PRIORITY_HIGH,\n      parse: function() {\n          return { type: 'tableSeparator' };\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() { return ' | '; }\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: PARSE_PRIORITY_MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full;\n            }),\n        };\n      },\n      react(node /*, output, state*/) {\n        return node.content;\n      },\n    },\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: PARSE_PRIORITY_MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>;\n      },\n    },\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        };\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>;\n      },\n    },\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        };\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: PARSE_PRIORITY_LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>;\n      },\n    },\n  };\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R);\n        const trimmer = new RegExp(`^${whitespace}`, 'gm');\n        const trimmed = capture[3].replace(trimmer, '');\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline;\n\n        const tagName = capture[1].toLowerCase();\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1;\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1]\n        };\n      },\n      react(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse ? node.content : output(node.content, state)}\n          </node.tag>\n        );\n      },\n    }\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: PARSE_PRIORITY_HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        };\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />;\n      },\n    };\n  }\n\n  const parser = parserFor(rules);\n  const emitter = reactFor(ruleOutput(rules));\n\n  const jsx = compile(stripHtmlComments(markdown));\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          );\n        })}\n      </footer>\n    );\n  }\n\n  return jsx;\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n *\n * @param  {String}   options.children   must be a string\n * @param  {Object}   options.options    markdown-to-jsx options (arg 2 of the compiler)\n *\n * @return {ReactElement} the compiled JSX\n */\n\nexport default function Markdown({ children, options, ...props }) {\n  return React.cloneElement(compiler(children, options), props);\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  const PropTypes = require('prop-types');\n\n  Markdown.propTypes = {\n    children: PropTypes.string.isRequired,\n    options: PropTypes.object,\n  };\n}\n"]}